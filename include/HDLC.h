#ifndef __hdlc_H
#define __hdlc_H

#include <cstdint>


namespace hdlc {

/*
 *
 * */
static const uint8_t Flag = 0x7E;


/*
 *
 * */
enum class ClientIdEnum
{
    PublicClient = 0x10,
    Reader       = 0x20,
    Configurator = 0x30
};

/*
 *
 * */
union Format
{
    struct {
        uint8_t lo;
        uint8_t hi;
    };

    struct {
        uint16_t size  : 11;  // Размер посылки
        uint16_t s     : 1;   // Признак последней посылки при разделении передачи на несколько посылок
        uint16_t ftype : 4;   // Тип фрейма всегда одинаков = 0b00001010 (т.н. тип 3)
    };

    uint16_t value;

    Format(uint16_t _value)
        : value(_value)
    {}

    Format()
        : Format(0xA000)
    {}
};


/*
 *
 * */
enum class ControlType
{
    UNDEFINED = -1,

    //I кадр
    I     = 0b00000000, // информационный

    //S кадры (супервизорный)
    RR    = 0b00000001, // готов к приему
    RNR   = 0b00000101, // не готов к приему
    REJ   = 0b00001001, // отказ в приеме
    SREJ  = 0b00001101, // выборочный отказ в приеме

    // U кадры (ненумерованный, управляющий)
    UI    = 0b00000011, // короткая информация
    SNRM  = 0b10000011, // режим нормального ответа
    DISC  = 0b01000011, // разъединить
    UP    = 0b00100011, // ненумерованный опрос
    UA    = 0b01100011, // подтверждение
    TEST  = 0b11100011, // проверка
    SIM   = 0b00000111, // режим инициативного выхода
    FRMR  = 0b10000111, // неприем кадра
    DM    = 0b00001111, // Разъединено
    RSET  = 0b10001111, // сброс счётчика принятых кадров
    SARME = 0b01001111, // режим длинного асинхронного ответа
    SNRME = 0b11001111, // режим длинного нормального ответа
    SABM  = 0b00101111, // асинхронный сбалансированный режим
    XID   = 0b10101111, // идентификация станции
    SABME = 0b01101111  // режим длинного сбалансированного асинхронного ответа
};


} // hdlc

#endif /*__hdlc_H*/
